/*
 * Copyright 2019 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */

const logger = require('./../logger'),
	CPFApi = require('./cpf-api'),
	Engine = require('../cpf/request/engine.js'),
	ContentAnalyzerRequests = require('../cpf/request/contentAnalyzerRequests.js'),
	cpfConfig = require('../config/cpf-engine-config.js'),
	Document = require('../cpf/request/document.js');

function getIncludeRanges(includeRanges){
	const includeRangesList = [];
	for (let i = 0; i < includeRanges.length; i += 1) {
		var pageRange = includeRanges[i] || '1-';
		includeRangesList.push(pageRange);
	}
	return includeRangesList;
}
function generateInputFilesList(sourceFileRefs){
	var inputfileList = [];
	for(var i = 0; i < sourceFileRefs.length; i++){
		var inputFile = new Document(sourceFileRefs[i].input.mediaType,'file'+`${i}`);
		inputfileList.push(inputFile);
	}
	return inputfileList;
}

const CombinePDFApi = {

	combineFiles(context, sourceFileRefs,includeRanges, targetFileName){

		const outputDocument = new Document('application/pdf','file');
		var params = {};
		if(includeRanges){
			params = Object.assign({},{pageRange:getIncludeRanges(includeRanges)});
		}

		const engine = new Engine(generateInputFilesList(sourceFileRefs),params,outputDocument);
		const contentAnaylzerRequests = new ContentAnalyzerRequests(cpfConfig.combinePdf,engine);
		var contentAnaylzerRequestsJsonString = JSON.stringify(contentAnaylzerRequests);

		return CPFApi.cpfPredictApi(context, sourceFileRefs, contentAnaylzerRequestsJsonString)
			.then(location => {
				return CPFApi.cpfStatusApi(context, location, targetFileName);})
			.then(targetFileRef => {
				targetFileRef.input.isOperationResult = true;
				logger.info('Conversion successfully completed');
				return Promise.resolve(targetFileRef);
			})
			.catch(res => Promise.reject(res));
	}


};

module.exports = CombinePDFApi;
